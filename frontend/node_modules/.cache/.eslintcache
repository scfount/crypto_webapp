[{"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/index.js":"1","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/reportWebVitals.js":"2","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/App.js":"3","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/Button.js":"4","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/Nav.js":"5","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/shift/ShiftEncrypt.js":"6","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/shift/ShiftDecrypt.js":"7","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/shift/Shift.js":"8","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/affine/Affine.js":"9","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/vigenere/Vigenere.js":"10","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/vigenere/VigenereEncrypt.js":"11","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/vigenere/VigenereDecrypt.js":"12","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/affine/AffineEncrypt.js":"13","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/affine/AffineDecrypt.js":"14","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/Description.js":"15"},{"size":500,"mtime":1645389170194,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1645389170194,"results":"18","hashOfConfig":"17"},{"size":747,"mtime":1648681372142,"results":"19","hashOfConfig":"17"},{"size":231,"mtime":1646198466987,"results":"20","hashOfConfig":"17"},{"size":763,"mtime":1648681364540,"results":"21","hashOfConfig":"17"},{"size":2413,"mtime":1647041726096,"results":"22","hashOfConfig":"17"},{"size":2419,"mtime":1647887481706,"results":"23","hashOfConfig":"17"},{"size":340,"mtime":1647046321026,"results":"24","hashOfConfig":"17"},{"size":424,"mtime":1648738401065,"results":"25","hashOfConfig":"17"},{"size":496,"mtime":1647047447071,"results":"26","hashOfConfig":"17"},{"size":2407,"mtime":1647886272519,"results":"27","hashOfConfig":"17"},{"size":2412,"mtime":1647887457554,"results":"28","hashOfConfig":"17"},{"size":2928,"mtime":1648738274859,"results":"29","hashOfConfig":"17"},{"size":2934,"mtime":1648738286576,"results":"30","hashOfConfig":"17"},{"size":351,"mtime":1648680606433,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"rtlmth",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/index.js",[],[],["89","90"],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/reportWebVitals.js",[],[],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/App.js",[],[],["91","92"],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/Button.js",[],[],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/Nav.js",[],[],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/shift/ShiftEncrypt.js",["93"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport '../../App.css';\nimport Button from '../Button';\n\nfunction ShiftEncrypt() {\n    const [encryptedText, setEncryptedText] = useState({})\n    const [shiftEncrypt, setShiftEncrypt] = useState({\n        plaintext: '',\n        key: 0\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setShiftEncrypt({\n            ...shiftEncrypt,\n            [name]: value\n        });\n    };\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // const path = 'http://127.0.0.1:5000/shift_encrypt'\n        const path = 'https://cryptography-web-application.herokuapp.com/shift_encrypt'\n        axios({\n            method: 'POST',\n            url: path,\n            data: {\n                plaintext: shiftEncrypt.plaintext,\n                key: shiftEncrypt.key\n            }\n        })\n            .then(response => {\n                console.log(\"SUCCESS\", response)\n                setEncryptedText(response)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"App\">\n            <h2>Encrypt</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"\">Plaintext:\n                        <input\n                            type=\"text\"\n                            name=\"plaintext\"\n                            id=\"plain-text\"\n                            value={shiftEncrypt.plaintext}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Key:\n                        <input\n                            type=\"number\"\n                            pattern='[0-9]'\n                            name=\"key\"\n                            id=\"key-num\"\n                            value={shiftEncrypt.key}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <Button name={'Encrypt'} />\n            </form>\n\n            <div>{encryptedText.status === 200 &&\n                <div>\n                    <h4>Encrypted Text:</h4>\n                    <p>{encryptedText.data.ciphertext}</p>\n                </div>}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ShiftEncrypt;","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/shift/ShiftDecrypt.js",["94"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport '../../App.css';\nimport Button from '../Button';\n\nfunction ShiftDecrypt() {\n    const [decryptedText, setDecryptedText] = useState({})\n    const [shiftDecrypt, setShiftDecrypt] = useState({\n        ciphertext: '',\n        key: 0\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setShiftDecrypt({\n            ...shiftDecrypt,\n            [name]: value\n        });\n    };\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // const path = 'http://127.0.0.1:5000/shift_encrypt'\n        const path = 'https://cryptography-web-application.herokuapp.com/shift_decrypt'\n        axios({\n            method: 'POST',\n            url: path,\n            data: {\n                ciphertext: shiftDecrypt.ciphertext,\n                key: shiftDecrypt.key\n            }\n        })\n            .then(response => {\n                console.log(\"SUCCESS\", response)\n                setDecryptedText(response)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"App\">\n            <h2>Decrypt</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"\">Ciphertext:\n                        <input\n                            type=\"text\"\n                            name=\"ciphertext\"\n                            id=\"cipher-text\"\n                            value={shiftDecrypt.ciphertext}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Key:\n                        <input\n                            type=\"number\"\n                            pattern='[0-9]'\n                            name=\"key\"\n                            id=\"key-num\"\n                            value={shiftDecrypt.key}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <Button name={'Decrypt'} />\n            </form>\n\n            <div>{decryptedText.status === 200 &&\n                <div>\n                    <h4>Decrypted Text:</h4>\n                    <p>{decryptedText.data.plaintext}</p>\n                </div>}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ShiftDecrypt;","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/shift/Shift.js",[],[],["95","96"],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/affine/Affine.js",[],[],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/vigenere/Vigenere.js",["97","98","99"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport '../../App.css';\nimport VigenereEncrypt from './VigenereEncrypt';\nimport VigenereDecrypt from './VigenereDecrypt';\n\nfunction Vigenere() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Vigenere Cipher</h1>\n                <VigenereEncrypt />\n                <VigenereDecrypt />\n            </header>\n\n        </div>\n    );\n}\n\nexport default Vigenere;",["100","101"],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/vigenere/VigenereEncrypt.js",["102"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport '../../App.css';\nimport Button from '../Button';\n\nfunction VigenereEncrypt() {\n    const [encryptedText, setEncryptedText] = useState({})\n    const [vigenereEncrypt, setVigenereEncrypt] = useState({\n        plaintext: '',\n        key: ''\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setVigenereEncrypt({\n            ...vigenereEncrypt,\n            [name]: value\n        });\n    };\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // const path = 'http://127.0.0.1:5000/vigenere_encrypt'\n        const path = 'https://cryptography-web-application.herokuapp.com/vigenere_encrypt'\n        axios({\n            method: 'POST',\n            url: path,\n            data: {\n                plaintext: vigenereEncrypt.plaintext,\n                key: vigenereEncrypt.key\n            }\n        })\n            .then(response => {\n                console.log(\"SUCCESS\", response)\n                setEncryptedText(response)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"App\">\n            <h2>Encrypt</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"\">Plaintext:\n                        <input\n                            type=\"text\"\n                            name=\"plaintext\"\n                            id=\"plain-text\"\n                            value={vigenereEncrypt.plaintext}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Key:\n                        <input\n                            type=\"text\"\n                            name=\"key\"\n                            id=\"key-value\"\n                            value={vigenereEncrypt.key}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <Button name={'Encrypt'} />\n            </form>\n\n            <div>{encryptedText.status === 200 &&\n                <div>\n                    <h4>Encrypted Text:</h4>\n                    <p>{encryptedText.data.ciphertext}</p>\n                </div>}\n            </div>\n        </div>\n\n\n    );\n}\n\nexport default VigenereEncrypt;",["103","104"],"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/vigenere/VigenereDecrypt.js",["105"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport '../../App.css';\nimport Button from '../Button';\n\nfunction VigenereDecrypt() {\n    const [decryptedText, setDecryptedText] = useState({})\n    const [vigenereDecrypt, setVigenereDecrypt] = useState({\n        ciphertext: '',\n        key: ''\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setVigenereDecrypt({\n            ...vigenereDecrypt,\n            [name]: value\n        });\n    };\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // const path = 'http://127.0.0.1:5000/vigenere_encrypt'\n        const path = 'https://cryptography-web-application.herokuapp.com/vigenere_decrypt'\n        axios({\n            method: 'POST',\n            url: path,\n            data: {\n                ciphertext: vigenereDecrypt.ciphertext,\n                key: vigenereDecrypt.key\n            }\n        })\n            .then(response => {\n                console.log(\"SUCCESS\", response)\n                setDecryptedText(response)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"App\">\n            <h2>Decrypt</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"\">Ciphertext:\n                        <input\n                            type=\"text\"\n                            name=\"ciphertext\"\n                            id=\"cipher-text\"\n                            value={vigenereDecrypt.ciphertext}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Key:\n                        <input\n                            type=\"text\"\n                            name=\"key\"\n                            id=\"key-value\"\n                            value={vigenereDecrypt.key}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <Button name={'Decrypt'} />\n            </form>\n\n            <div>{decryptedText.status === 200 &&\n                <div>\n                    <h4>Decrypted Text:</h4>\n                    <p>{decryptedText.data.plaintext}</p>\n                </div>}\n            </div>\n\n        </div>\n    );\n}\n\nexport default VigenereDecrypt;","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/affine/AffineEncrypt.js",["106"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport '../../App.css';\nimport Button from '../Button';\n\nfunction AffineEncrypt() {\n    const [encryptedText, setEncryptedText] = useState({})\n    const [affineEncrypt, setAffineEncrypt] = useState({\n        plaintext: '',\n        alpha: 0,\n        beta: 0\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setAffineEncrypt({\n            ...affineEncrypt,\n            [name]: value\n        });\n    };\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // const path = 'http://127.0.0.1:5000/affine_encrypt'\n        const path = 'https://cryptography-web-application.herokuapp.com/affine_encrypt'\n        axios({\n            method: 'POST',\n            url: path,\n            data: {\n                plaintext: affineEncrypt.plaintext,\n                alpha: affineEncrypt.alpha,\n                beta: affineEncrypt.beta\n            }\n        })\n            .then(response => {\n                console.log(\"SUCCESS\", response)\n                setEncryptedText(response)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"Cipher\">\n            <h2>Encrypt</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"\">Plaintext:\n                        <input\n                            type=\"text\"\n                            name=\"plaintext\"\n                            id=\"plain-text\"\n                            value={affineEncrypt.plaintext}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Alpha:\n                        <input\n                            type=\"number\"\n                            pattern='[0-9]'\n                            name=\"alpha\"\n                            id=\"alpha-num\"\n                            value={affineEncrypt.alpha}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Beta:\n                        <input\n                            type=\"number\"\n                            pattern='[0-9]'\n                            name=\"beta\"\n                            id=\"beta-num\"\n                            value={affineEncrypt.beta}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <Button name={'Encrypt'} />\n            </form>\n\n            <div>{encryptedText.status === 200 &&\n                <div>\n                    <h4>Encrypted Text:</h4>\n                    <p>{encryptedText.data.ciphertext}</p>\n                </div>}\n            </div>\n\n        </div>\n    );\n}\n\nexport default AffineEncrypt;","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/affine/AffineDecrypt.js",["107"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport '../../App.css';\nimport Button from '../Button';\n\nfunction AffineDecrypt() {\n    const [decryptedText, setDecryptedText] = useState({})\n    const [affineDecrypt, setAffineDecrypt] = useState({\n        ciphertext: '',\n        alpha: 0,\n        beta: 0\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setAffineDecrypt({\n            ...affineDecrypt,\n            [name]: value\n        });\n    };\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // const path = 'http://127.0.0.1:5000/affine_decrypt'\n        const path = 'https://cryptography-web-application.herokuapp.com/affine_decrypt'\n        axios({\n            method: 'POST',\n            url: path,\n            data: {\n                ciphertext: affineDecrypt.ciphertext,\n                alpha: affineDecrypt.alpha,\n                beta: affineDecrypt.beta\n            }\n        })\n            .then(response => {\n                console.log(\"SUCCESS\", response)\n                setDecryptedText(response)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"Cipher\">\n            <h2>Decrypt</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"\">Ciphertext:\n                        <input\n                            type=\"text\"\n                            name=\"ciphertext\"\n                            id=\"cipher-text\"\n                            value={affineDecrypt.ciphertext}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Alpha:\n                        <input\n                            type=\"number\"\n                            pattern='[0-9]'\n                            name=\"alpha\"\n                            id=\"alpha-num\"\n                            value={affineDecrypt.alpha}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <div>\n                    <label htmlFor=\"\">Beta:\n                        <input\n                            type=\"number\"\n                            pattern='[0-9]'\n                            name=\"beta\"\n                            id=\"beta-num\"\n                            value={affineDecrypt.beta}\n                            onChange={handleChange} />\n                    </label>\n                </div>\n                <Button name={'Decrypt'} />\n            </form>\n\n            <div>{decryptedText.status === 200 &&\n                <div>\n                    <h4>Decrypted Text:</h4>\n                    <p>{decryptedText.data.plaintext}</p>\n                </div>}\n            </div>\n\n        </div>\n    );\n}\n\nexport default AffineDecrypt;","/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/components/Description.js",[],[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"108","replacedBy":"118"},{"ruleId":"110","replacedBy":"119"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"120","line":1,"column":28,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"121","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":13},{"ruleId":"108","replacedBy":"122"},{"ruleId":"110","replacedBy":"123"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"108","replacedBy":"124"},{"ruleId":"110","replacedBy":"125"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],["126"],["127"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["126"],["127"],"'useState' is defined but never used.","'axios' is defined but never used.",["126"],["127"],["126"],["127"],"no-global-assign","no-unsafe-negation"]