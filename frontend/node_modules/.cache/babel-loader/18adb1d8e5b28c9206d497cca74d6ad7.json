{"ast":null,"code":"var _jsxFileName = \"/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [message, setMessage] = useState({});\n  const [ciphertext, setCiphertext] = useState({});\n  const [plain_text, setPlainText] = useState({});\n  const [error, setErrorMessage] = useState({}); // useEffect(() => {\n  //   axios.get('https://cryptography-web-application.herokuapp.com/flask/crypto').then(response => {\n  //     console.log(\"SUCCESS\", response)\n  //     setGetMessage(response)\n  //   }).catch(error => {\n  //     console.log(error)\n  //   })\n\n  let handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      let res = await fetch(\"http://127.0.0.1:5000/flask/crypto\", {\n        method: \"GET\",\n        body: JSON.stringify({\n          ciphertext\n        })\n      });\n      let resJson = await res.json();\n\n      if (res.status === 200) {\n        console.log(resJson);\n        setPlainText(resJson);\n      } else {\n        setErrorMessage(\"Some error occurred\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    axios.get('http://127.0.0.1:5000/flask/crypto').then(response => {\n      console.log(\"SUCCESS\", response);\n      setMessage(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cryptography Web App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message.status === 200 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: message.data.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"LOADING\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: [\"Enter Ciphertext to decrypt\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: ciphertext,\n            onChange: e => setCiphertext(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Decrypt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"wpzTH2Lzw2906k+f0fFxd4bo+2A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stevenfountain/Documents/GitHub/crypto_webapp/frontend/src/App.js"],"names":["React","useEffect","useState","axios","App","message","setMessage","ciphertext","setCiphertext","plain_text","setPlainText","error","setErrorMessage","handleSubmit","e","preventDefault","res","fetch","method","body","JSON","stringify","resJson","json","status","console","log","err","get","then","response","catch","data","target","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios'\n\nfunction App() {\n  const [message, setMessage] = useState({})\n  const [ciphertext, setCiphertext] = useState({})\n  const [plain_text, setPlainText] = useState({})\n  const [error, setErrorMessage] = useState({})\n\n  // useEffect(() => {\n  //   axios.get('https://cryptography-web-application.herokuapp.com/flask/crypto').then(response => {\n  //     console.log(\"SUCCESS\", response)\n  //     setGetMessage(response)\n  //   }).catch(error => {\n  //     console.log(error)\n  //   })\n\n  let handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      let res = await fetch(\"http://127.0.0.1:5000/flask/crypto\", {\n        method: \"GET\",\n        body: JSON.stringify({\n          ciphertext\n        }),\n      });\n      let resJson = await res.json();\n      if (res.status === 200) {\n        console.log(resJson)\n        setPlainText(resJson);\n\n      } else {\n        setErrorMessage(\"Some error occurred\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    axios.get('http://127.0.0.1:5000/flask/crypto').then(response => {\n      console.log(\"SUCCESS\", response)\n      setMessage(response)\n    }).catch(error => {\n      console.log(error)\n    })\n\n  }, [])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Cryptography Web App</h1>\n        <div>{message.status === 200 ?\n          <h3>{message.data.message}</h3>\n          :\n          <h3>LOADING</h3>}</div>\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"\">\n            Enter Ciphertext to decrypt\n            <input\n              type=\"text\"\n              value={ciphertext}\n              onChange={(e) => setCiphertext(e.target.value)} />\n          </label>\n          <button type='submit'>Decrypt</button>\n        </form>\n        {/* <p>{plain_text}</p> */}\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}